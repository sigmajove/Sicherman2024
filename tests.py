import pytest
import sicherman2024 as main


def test_rotate():
    for x in range(-5, 5):
        for y in range(-5, 5):
            start = (x, y)
            orbit = start
            for _ in range(6):
                orbit = main.rotate_cell(orbit)
            assert orbit == start


big_piece = main.make_cells(
    1,
    [
        r" __  __  __  __  __  __  __  __  __  __  __  ",
        r"\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  / ",
        r" \/__\/__\/__\/__\/__\/__\/__\/__\/__\/__\/  ",
        r" /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  ",
        r"/__\/__\/__\/__\/__\/__\/__\/__\/__\/__\/__\ ",
        r"\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  / ",
        r" \/__\/__\/__\/__\/__\/__\/__\/__\/__\/__\/  ",
        r" /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  ",
        r"/__\/__\/__\/__\/__\/__\/__\/__\/__\/__\/__\ ",
        r"\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  / ",
        r" \/__\/__\/__\/__\/__\/__\/__\/__\/__\/__\/  ",
        r" /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  ",
        r"/__\/__\/__\/__\/__\/__\/__\/__\/__\/__\/__\ ",
    ],
)

round_piece = main.make_cells(
    1,
    [
        r"         __  __  __  __  __  __  __  __  __  ",
        r"       /\  /\  /\  /\  /\  /\  /\  /\  /\  / ",
        r"      /__\/__\/__\/__\/__\/__\/__\/__\/__\/  ",
        r"     /\  /\  /\  /\  /\  /\  /\  /\  /\  /   ",
        r"    /__\/__\/__\/__\/__\/__\/__\/__\/__\/    ",
        r"   /\  /\  /\  /\  /\  /\  /\  /\  /\  /     ",
        r"  /__\/__\/__\/__\/__\/__\/__\/__\/__\/      ",
        r" /\  /\  /\  /\  /\  /\  /\  /\  /\  /       ",
        r"/__\/__\/__\/__\/__\/__\/__\/__\/__\/        ",
        r"\  /\  /\  /\  /\  /\  /\  /\  /\  /         ",
        r" \/__\/__\/__\/__\/__\/__\/__\/__\/          ",
        r"  \  /\  /\  /\  /\  /\  /\  /\  /           ",
        r"   \/__\/__\/__\/__\/__\/__\/__\/            ",
    ],
)

notch_piece = main.make_cells(
    1,
    [
        r"         __  __  __  __  __  __  __  __  __  ",
        r"       /\  /\  /\  /\  /\  /\  /\  /\  /\  / ",
        r"      /__\/__\/__\/__\/__\/__\/__\/__\/__\/  ",
        r"     /\  /\  /\  /\  /\  /\  /\  /\  /\  /   ",
        r"    /__\/__\/__\/__\/__\/__\/__\/__\/__\/    ",
        r"   /\  /\  /\  /\  /\  /\  /\  /\  /\  /     ",
        r"  /__\/__\/__\/__\/__\/__\/__\/__\/__\/      ",
        r" /\  /\  /\  /\  /\  /\  /\  /\  /\  /       ",
        r"/__\/__\/__\/__\/__\/__\/__\/__\/__\/        ",
        r"\  /\  /\  /\  /\  /\  /\  /\  /\  /         ",
        r" \/__\/__\/__\/__\/__\/__\/__\/__\/          ",
        r"  \  /\  /\  /\  /\  /\  /\  /\  /           ",
        r"   \/__\/__\/__\/  \/__\/__\/__\/            ",
    ],
)

round_piece = main.make_cells(
    1,
    [
        r"         __  __  __  __  __  __  __  __  __  ",
        r"       /\  /\  /\  /\  /\  /\  /\  /\  /\  / ",
        r"      /__\/__\/__\/__\/__\/__\/__\/__\/__\/  ",
        r"     /\  /\  /\  /\  /\  /\  /\  /\  /\  /   ",
        r"    /__\/__\/__\/__\/__\/__\/__\/__\/__\/    ",
        r"   /\  /\  /\  /\  /\  /\  /\  /\  /\  /     ",
        r"  /__\/__\/__\/__\/__\/__\/__\/__\/__\/      ",
        r" /\  /\  /\  /\  /\  /\  /\  /\  /\  /       ",
        r"/__\/__\/__\/__\/__\/__\/__\/__\/__\/        ",
        r"\  /\  /\  /\  /\  /\  /\  /\  /\  /         ",
        r" \/__\/__\/__\/__\/__\/__\/__\/__\/          ",
        r"  \  /\  /\  /\  /\  /\  /\  /\  /           ",
        r"   \/__\/__\/__\/__\/__\/__\/__\/            ",
    ],
)

single_hole_piece = main.make_cells(
    1,
    [
        r"         __  __  __  __  __  __  __  __  __  ",
        r"       /\  /\  /\  /\  /\  /\  /\  /\  /\  / ",
        r"      /__\/__\/__\/__\/__\/__\/__\/__\/__\/  ",
        r"     /\  /\  /\  /\  /\  /\  /\  /\  /\  /   ",
        r"    /__\/__\/__\/__\/__\/__\/__\/__\/__\/    ",
        r"   /\  /\  /\  /\##/\  /\  /\  /\  /\  /     ",
        r"  /__\/__\/__\/__\/__\/__\/__\/__\/__\/      ",
        r" /\  /\  /\  /\  /\  /\  /\  /\  /\  /       ",
        r"/__\/__\/__\/__\/__\/__\/__\/__\/__\/        ",
        r"\  /\  /\  /\  /\  /\  /\  /\  /\  /         ",
        r" \/__\/__\/__\/__\/__\/__\/__\/__\/          ",
        r"  \  /\  /\  /\  /\  /\  /\  /\  /           ",
        r"   \/__\/__\/__\/__\/__\/__\/__\/            ",
    ],
)

double_hole_piece = main.make_cells(
    1,
    [
        r"         __  __  __  __  __  __  __  __  __  ",
        r"       /\  /\  /\  /\  /\  /\  /\  /\  /\  / ",
        r"      /__\/__\/__\/__\/__\/__\/__\/__\/__\/  ",
        r"     /\  /\  /\  /\  /\  /\  /\  /\  /\  /   ",
        r"    /__\/__\/__\/  \/__\/__\/__\/__\/__\/    ",
        r"   /\  /\  /\  /\  /\  /\  /\  /\  /\  /     ",
        r"  /__\/__\/__\/__\/__\/__\/__\/__\/__\/      ",
        r" /\  /\  /\  /\  /\  /\  /\  /\  /\  /       ",
        r"/__\/__\/__\/__\/__\/__\/__\/__\/__\/        ",
        r"\  /\  /\  /\  /\  /\  /\  /\  /\  /         ",
        r" \/__\/__\/__\/__\/__\/__\/__\/__\/          ",
        r"  \  /\  /\  /\  /\  /\  /\  /\  /           ",
        r"   \/__\/__\/__\/__\/__\/__\/__\/            ",
    ],
)

three_hole_piece = main.make_cells(
    1,
    [
        r"         __  __  __  __  __  __  __  __  __  ",
        r"       /\  /\  /\  /\  /\  /\  /\  /\  /\  / ",
        r"      /__\/__\/__\/__\/__\/__\/__\/__\/__\/  ",
        r"     /\  /\  /\  /\  /\  /\  /\  /\  /\  /   ",
        r"    /__\/__\/__\/  \/__\/__\/__\/__\/__\/    ",
        r"   /\  /\  /\  /\  /\  /\  /\  /\  /\  /     ",
        r"  /__\/__\/__\/__\/__\/__\/__\/__\/__\/      ",
        r" /\  /\  /\  /\  /\  /\  /\  /\  /\  /       ",
        r"/__\/__\/  \/__\/__\/__\/__\/__\/__\/        ",
        r"\  /\  /\  /\  /\  /\  /\##/\  /\  /         ",
        r" \/__\/__\/__\/__\/__\/__\/__\/__\/          ",
        r"  \  /\  /\  /\  /\  /\  /\  /\  /           ",
        r"   \/__\/__\/__\/__\/__\/__\/__\/            ",
    ],
)

edge_hole_piece = main.make_cells(
    1,
    [
        r"         __  __  __  __               ",
        r"       /\  /\  /\  /\  /\             ",
        r"      /__\/__\/  \/__\/__\            ",
        r"     /\  /\  /\  /\  /\  /\           ",
        r"    /__\/__\/__\/  \/__\/__\          ",
        r"   /\  /\  /\  /\  /\  /\  /          ",
        r"  /__\/__\/__\/__\/__\/__\/__  __     ",
        r" /\  /\  /\  /\  /\  /\  /\  /\  /\   ",
        r"/__\/__\/  \/__\/__\/__\/__\/__\/__\  ",
    ],
)


gutter_piece = main.make_cells(
    1,
    [
        r"         __  __  __  __  __      __      __  ",
        r"       /\  /\  /\  /\  /\  /   /\  /   /\  / ",
        r"      /__\/__\/__\/__\/__\/__ /__\/   /__\/  ",
        r"                     /\  /\  /\  /   /\  /   ",
        r"     __  __  __  __ /__\/__\/__\/   /__\/    ",
        r"   /\  /\  /\  /\  /\  /           /\  /     ",
        r"  /__\/__\/__\/__\/__\/    __  __ /__\/      ",
        r" /\  /\  /\  /   /\  /   /\  /\  /\  /       ",
        r"/__\/__\/__\/   /__\/__ /__\/__\/__\/        ",
        r"\  /\  /\  /   /\  /\  /\  /\  /\  /         ",
        r" \/__\/__\/   /__\/__\/__\/__\/__\/          ",
        r"  \  /\  /   /\  /       /\  /\  /           ",
        r"   \/__\/   /__\/       /__\/__\/            ",
    ],
)


def depth_first_search_no_dups(piece):
    s = set()

    def report_border_cell(xy, direction):
        assert direction in range(0, main.NUM_DIRECTIONS)
        assert (xy, direction) is not set

    main.find_border(piece, report_border_cell)


def test_depth_first_search():
    depth_first_search_no_dups([]) == 0
    depth_first_search_no_dups(big_piece) == 0
    depth_first_search_no_dups(round_piece) == 0
    depth_first_search_no_dups(notch_piece) == 0
    depth_first_search_no_dups(single_hole_piece) == 1
    depth_first_search_no_dups(double_hole_piece) == 1
    depth_first_search_no_dups(three_hole_piece) == 3


def test_convex():
    assert main.how_convex([]) == 0
    assert main.how_convex(big_piece) == 12
    assert main.how_convex(round_piece) == 0
    assert main.how_convex(notch_piece) == 1


def test_holes():
    assert main.how_many_holes([]) == 0
    assert main.how_many_holes(big_piece) == 0
    assert main.how_many_holes(round_piece) == 0
    assert main.how_many_holes(notch_piece) == 0
    assert main.how_many_holes(single_hole_piece) == 1
    assert main.how_many_holes(double_hole_piece) == 1
    assert main.how_many_holes(three_hole_piece) == 3
    assert main.how_many_holes(edge_hole_piece) == 1


def test_points():
    assert main.how_many_points([]) == 0
    assert main.how_many_points(big_piece) == 12
    assert main.how_many_points(round_piece) == 9
    assert main.how_many_points(notch_piece) == 13
    assert main.how_many_points(gutter_piece) == 28

print(main.how_many_holes(edge_hole_piece))
